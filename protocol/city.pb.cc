// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "city.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace citygen {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* Vector3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3_reflection_ = NULL;
const ::google::protobuf::Descriptor* StepSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StepSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* Settings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Settings_reflection_ = NULL;
const ::google::protobuf::Descriptor* City_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  City_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_city_2eproto() {
  protobuf_AddDesc_city_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "city.proto");
  GOOGLE_CHECK(file != NULL);
  Vector3_descriptor_ = file->message_type(0);
  static const int Vector3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, z_),
  };
  Vector3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector3_descriptor_,
      Vector3::default_instance_,
      Vector3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector3));
  StepSettings_descriptor_ = file->message_type(1);
  static const int StepSettings_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepSettings, num_segments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepSettings, step_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepSettings, deviation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepSettings, road_height_),
  };
  StepSettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StepSettings_descriptor_,
      StepSettings::default_instance_,
      StepSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepSettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepSettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StepSettings));
  Settings_descriptor_ = file->message_type(2);
  static const int Settings_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, step_settings_),
  };
  Settings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Settings_descriptor_,
      Settings::default_instance_,
      Settings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Settings));
  City_descriptor_ = file->message_type(3);
  static const int City_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, primary_nodes_),
  };
  City_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      City_descriptor_,
      City::default_instance_,
      City_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(City));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_city_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector3_descriptor_, &Vector3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StepSettings_descriptor_, &StepSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Settings_descriptor_, &Settings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    City_descriptor_, &City::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_city_2eproto() {
  delete Vector3::default_instance_;
  delete Vector3_reflection_;
  delete StepSettings::default_instance_;
  delete StepSettings_reflection_;
  delete Settings::default_instance_;
  delete Settings_reflection_;
  delete City::default_instance_;
  delete City_reflection_;
}

void protobuf_AddDesc_city_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ncity.proto\022\020citygen.protocol\"*\n\007Vector"
    "3\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"s\n\014St"
    "epSettings\022\030\n\014num_segments\030\001 \001(\005:\00220\022\026\n\t"
    "step_size\030\002 \001(\002:\0030.5\022\031\n\tdeviation\030\003 \001(\002:"
    "\0060.7854\022\026\n\013road_height\030\004 \001(\002:\0015\"A\n\010Setti"
    "ngs\0225\n\rstep_settings\030\001 \001(\0132\036.citygen.pro"
    "tocol.StepSettings\"f\n\004City\022,\n\010settings\030\001"
    " \001(\0132\032.citygen.protocol.Settings\0220\n\rprim"
    "ary_nodes\030\002 \003(\0132\031.citygen.protocol.Vecto"
    "r3", 362);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "city.proto", &protobuf_RegisterTypes);
  Vector3::default_instance_ = new Vector3();
  StepSettings::default_instance_ = new StepSettings();
  Settings::default_instance_ = new Settings();
  City::default_instance_ = new City();
  Vector3::default_instance_->InitAsDefaultInstance();
  StepSettings::default_instance_->InitAsDefaultInstance();
  Settings::default_instance_->InitAsDefaultInstance();
  City::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_city_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_city_2eproto {
  StaticDescriptorInitializer_city_2eproto() {
    protobuf_AddDesc_city_2eproto();
  }
} static_descriptor_initializer_city_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Vector3::kXFieldNumber;
const int Vector3::kYFieldNumber;
const int Vector3::kZFieldNumber;
#endif  // !_MSC_VER

Vector3::Vector3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:citygen.protocol.Vector3)
}

void Vector3::InitAsDefaultInstance() {
}

Vector3::Vector3(const Vector3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:citygen.protocol.Vector3)
}

void Vector3::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:citygen.protocol.Vector3)
  SharedDtor();
}

void Vector3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3_descriptor_;
}

const Vector3& Vector3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_city_2eproto();
  return *default_instance_;
}

Vector3* Vector3::default_instance_ = NULL;

Vector3* Vector3::New() const {
  return new Vector3;
}

void Vector3::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Vector3*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:citygen.protocol.Vector3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:citygen.protocol.Vector3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:citygen.protocol.Vector3)
  return false;
#undef DO_
}

void Vector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:citygen.protocol.Vector3)
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:citygen.protocol.Vector3)
}

::google::protobuf::uint8* Vector3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:citygen.protocol.Vector3)
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:citygen.protocol.Vector3)
  return target;
}

int Vector3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector3::MergeFrom(const Vector3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3::CopyFrom(const Vector3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {

  return true;
}

void Vector3::Swap(Vector3* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3_descriptor_;
  metadata.reflection = Vector3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StepSettings::kNumSegmentsFieldNumber;
const int StepSettings::kStepSizeFieldNumber;
const int StepSettings::kDeviationFieldNumber;
const int StepSettings::kRoadHeightFieldNumber;
#endif  // !_MSC_VER

StepSettings::StepSettings()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:citygen.protocol.StepSettings)
}

void StepSettings::InitAsDefaultInstance() {
}

StepSettings::StepSettings(const StepSettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:citygen.protocol.StepSettings)
}

void StepSettings::SharedCtor() {
  _cached_size_ = 0;
  num_segments_ = 20;
  step_size_ = 0.5f;
  deviation_ = 0.7854f;
  road_height_ = 5;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StepSettings::~StepSettings() {
  // @@protoc_insertion_point(destructor:citygen.protocol.StepSettings)
  SharedDtor();
}

void StepSettings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StepSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StepSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StepSettings_descriptor_;
}

const StepSettings& StepSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_city_2eproto();
  return *default_instance_;
}

StepSettings* StepSettings::default_instance_ = NULL;

StepSettings* StepSettings::New() const {
  return new StepSettings;
}

void StepSettings::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    num_segments_ = 20;
    step_size_ = 0.5f;
    deviation_ = 0.7854f;
    road_height_ = 5;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StepSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:citygen.protocol.StepSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_segments = 1 [default = 20];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_segments_)));
          set_has_num_segments();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_step_size;
        break;
      }

      // optional float step_size = 2 [default = 0.5];
      case 2: {
        if (tag == 21) {
         parse_step_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &step_size_)));
          set_has_step_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_deviation;
        break;
      }

      // optional float deviation = 3 [default = 0.7854];
      case 3: {
        if (tag == 29) {
         parse_deviation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &deviation_)));
          set_has_deviation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_road_height;
        break;
      }

      // optional float road_height = 4 [default = 5];
      case 4: {
        if (tag == 37) {
         parse_road_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &road_height_)));
          set_has_road_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:citygen.protocol.StepSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:citygen.protocol.StepSettings)
  return false;
#undef DO_
}

void StepSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:citygen.protocol.StepSettings)
  // optional int32 num_segments = 1 [default = 20];
  if (has_num_segments()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_segments(), output);
  }

  // optional float step_size = 2 [default = 0.5];
  if (has_step_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->step_size(), output);
  }

  // optional float deviation = 3 [default = 0.7854];
  if (has_deviation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->deviation(), output);
  }

  // optional float road_height = 4 [default = 5];
  if (has_road_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->road_height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:citygen.protocol.StepSettings)
}

::google::protobuf::uint8* StepSettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:citygen.protocol.StepSettings)
  // optional int32 num_segments = 1 [default = 20];
  if (has_num_segments()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_segments(), target);
  }

  // optional float step_size = 2 [default = 0.5];
  if (has_step_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->step_size(), target);
  }

  // optional float deviation = 3 [default = 0.7854];
  if (has_deviation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->deviation(), target);
  }

  // optional float road_height = 4 [default = 5];
  if (has_road_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->road_height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:citygen.protocol.StepSettings)
  return target;
}

int StepSettings::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num_segments = 1 [default = 20];
    if (has_num_segments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_segments());
    }

    // optional float step_size = 2 [default = 0.5];
    if (has_step_size()) {
      total_size += 1 + 4;
    }

    // optional float deviation = 3 [default = 0.7854];
    if (has_deviation()) {
      total_size += 1 + 4;
    }

    // optional float road_height = 4 [default = 5];
    if (has_road_height()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StepSettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StepSettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StepSettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StepSettings::MergeFrom(const StepSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_segments()) {
      set_num_segments(from.num_segments());
    }
    if (from.has_step_size()) {
      set_step_size(from.step_size());
    }
    if (from.has_deviation()) {
      set_deviation(from.deviation());
    }
    if (from.has_road_height()) {
      set_road_height(from.road_height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StepSettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StepSettings::CopyFrom(const StepSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepSettings::IsInitialized() const {

  return true;
}

void StepSettings::Swap(StepSettings* other) {
  if (other != this) {
    std::swap(num_segments_, other->num_segments_);
    std::swap(step_size_, other->step_size_);
    std::swap(deviation_, other->deviation_);
    std::swap(road_height_, other->road_height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StepSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StepSettings_descriptor_;
  metadata.reflection = StepSettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Settings::kStepSettingsFieldNumber;
#endif  // !_MSC_VER

Settings::Settings()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:citygen.protocol.Settings)
}

void Settings::InitAsDefaultInstance() {
  step_settings_ = const_cast< ::citygen::protocol::StepSettings*>(&::citygen::protocol::StepSettings::default_instance());
}

Settings::Settings(const Settings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:citygen.protocol.Settings)
}

void Settings::SharedCtor() {
  _cached_size_ = 0;
  step_settings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Settings::~Settings() {
  // @@protoc_insertion_point(destructor:citygen.protocol.Settings)
  SharedDtor();
}

void Settings::SharedDtor() {
  if (this != default_instance_) {
    delete step_settings_;
  }
}

void Settings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Settings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Settings_descriptor_;
}

const Settings& Settings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_city_2eproto();
  return *default_instance_;
}

Settings* Settings::default_instance_ = NULL;

Settings* Settings::New() const {
  return new Settings;
}

void Settings::Clear() {
  if (has_step_settings()) {
    if (step_settings_ != NULL) step_settings_->::citygen::protocol::StepSettings::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Settings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:citygen.protocol.Settings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .citygen.protocol.StepSettings step_settings = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_step_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:citygen.protocol.Settings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:citygen.protocol.Settings)
  return false;
#undef DO_
}

void Settings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:citygen.protocol.Settings)
  // optional .citygen.protocol.StepSettings step_settings = 1;
  if (has_step_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->step_settings(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:citygen.protocol.Settings)
}

::google::protobuf::uint8* Settings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:citygen.protocol.Settings)
  // optional .citygen.protocol.StepSettings step_settings = 1;
  if (has_step_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->step_settings(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:citygen.protocol.Settings)
  return target;
}

int Settings::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .citygen.protocol.StepSettings step_settings = 1;
    if (has_step_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->step_settings());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Settings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Settings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Settings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Settings::MergeFrom(const Settings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_step_settings()) {
      mutable_step_settings()->::citygen::protocol::StepSettings::MergeFrom(from.step_settings());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Settings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Settings::CopyFrom(const Settings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Settings::IsInitialized() const {

  return true;
}

void Settings::Swap(Settings* other) {
  if (other != this) {
    std::swap(step_settings_, other->step_settings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Settings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Settings_descriptor_;
  metadata.reflection = Settings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int City::kSettingsFieldNumber;
const int City::kPrimaryNodesFieldNumber;
#endif  // !_MSC_VER

City::City()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:citygen.protocol.City)
}

void City::InitAsDefaultInstance() {
  settings_ = const_cast< ::citygen::protocol::Settings*>(&::citygen::protocol::Settings::default_instance());
}

City::City(const City& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:citygen.protocol.City)
}

void City::SharedCtor() {
  _cached_size_ = 0;
  settings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

City::~City() {
  // @@protoc_insertion_point(destructor:citygen.protocol.City)
  SharedDtor();
}

void City::SharedDtor() {
  if (this != default_instance_) {
    delete settings_;
  }
}

void City::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* City::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return City_descriptor_;
}

const City& City::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_city_2eproto();
  return *default_instance_;
}

City* City::default_instance_ = NULL;

City* City::New() const {
  return new City;
}

void City::Clear() {
  if (has_settings()) {
    if (settings_ != NULL) settings_->::citygen::protocol::Settings::Clear();
  }
  primary_nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool City::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:citygen.protocol.City)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .citygen.protocol.Settings settings = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_primary_nodes;
        break;
      }

      // repeated .citygen.protocol.Vector3 primary_nodes = 2;
      case 2: {
        if (tag == 18) {
         parse_primary_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_primary_nodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_primary_nodes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:citygen.protocol.City)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:citygen.protocol.City)
  return false;
#undef DO_
}

void City::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:citygen.protocol.City)
  // optional .citygen.protocol.Settings settings = 1;
  if (has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->settings(), output);
  }

  // repeated .citygen.protocol.Vector3 primary_nodes = 2;
  for (int i = 0; i < this->primary_nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->primary_nodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:citygen.protocol.City)
}

::google::protobuf::uint8* City::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:citygen.protocol.City)
  // optional .citygen.protocol.Settings settings = 1;
  if (has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->settings(), target);
  }

  // repeated .citygen.protocol.Vector3 primary_nodes = 2;
  for (int i = 0; i < this->primary_nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->primary_nodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:citygen.protocol.City)
  return target;
}

int City::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .citygen.protocol.Settings settings = 1;
    if (has_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settings());
    }

  }
  // repeated .citygen.protocol.Vector3 primary_nodes = 2;
  total_size += 1 * this->primary_nodes_size();
  for (int i = 0; i < this->primary_nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->primary_nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void City::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const City* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const City*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void City::MergeFrom(const City& from) {
  GOOGLE_CHECK_NE(&from, this);
  primary_nodes_.MergeFrom(from.primary_nodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_settings()) {
      mutable_settings()->::citygen::protocol::Settings::MergeFrom(from.settings());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void City::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void City::CopyFrom(const City& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool City::IsInitialized() const {

  return true;
}

void City::Swap(City* other) {
  if (other != this) {
    std::swap(settings_, other->settings_);
    primary_nodes_.Swap(&other->primary_nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata City::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = City_descriptor_;
  metadata.reflection = City_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace citygen

// @@protoc_insertion_point(global_scope)
