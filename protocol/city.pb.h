// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city.proto

#ifndef PROTOBUF_city_2eproto__INCLUDED
#define PROTOBUF_city_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace citygen {
namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_city_2eproto();
void protobuf_AssignDesc_city_2eproto();
void protobuf_ShutdownFile_city_2eproto();

class Vector3;
class StepSettings;
class Settings;
class City;

// ===================================================================

class Vector3 : public ::google::protobuf::Message {
 public:
  Vector3();
  virtual ~Vector3();

  Vector3(const Vector3& from);

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3& default_instance();

  void Swap(Vector3* other);

  // implements Message ----------------------------------------------

  Vector3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector3& from);
  void MergeFrom(const Vector3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:citygen.protocol.Vector3)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;
  float z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_city_2eproto();
  friend void protobuf_AssignDesc_city_2eproto();
  friend void protobuf_ShutdownFile_city_2eproto();

  void InitAsDefaultInstance();
  static Vector3* default_instance_;
};
// -------------------------------------------------------------------

class StepSettings : public ::google::protobuf::Message {
 public:
  StepSettings();
  virtual ~StepSettings();

  StepSettings(const StepSettings& from);

  inline StepSettings& operator=(const StepSettings& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StepSettings& default_instance();

  void Swap(StepSettings* other);

  // implements Message ----------------------------------------------

  StepSettings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StepSettings& from);
  void MergeFrom(const StepSettings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 num_segments = 1 [default = 20];
  inline bool has_num_segments() const;
  inline void clear_num_segments();
  static const int kNumSegmentsFieldNumber = 1;
  inline ::google::protobuf::int32 num_segments() const;
  inline void set_num_segments(::google::protobuf::int32 value);

  // optional float step_size = 2 [default = 0.5];
  inline bool has_step_size() const;
  inline void clear_step_size();
  static const int kStepSizeFieldNumber = 2;
  inline float step_size() const;
  inline void set_step_size(float value);

  // optional float deviation = 3 [default = 0.7854];
  inline bool has_deviation() const;
  inline void clear_deviation();
  static const int kDeviationFieldNumber = 3;
  inline float deviation() const;
  inline void set_deviation(float value);

  // optional float road_height = 4 [default = 5];
  inline bool has_road_height() const;
  inline void clear_road_height();
  static const int kRoadHeightFieldNumber = 4;
  inline float road_height() const;
  inline void set_road_height(float value);

  // @@protoc_insertion_point(class_scope:citygen.protocol.StepSettings)
 private:
  inline void set_has_num_segments();
  inline void clear_has_num_segments();
  inline void set_has_step_size();
  inline void clear_has_step_size();
  inline void set_has_deviation();
  inline void clear_has_deviation();
  inline void set_has_road_height();
  inline void clear_has_road_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 num_segments_;
  float step_size_;
  float deviation_;
  float road_height_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_city_2eproto();
  friend void protobuf_AssignDesc_city_2eproto();
  friend void protobuf_ShutdownFile_city_2eproto();

  void InitAsDefaultInstance();
  static StepSettings* default_instance_;
};
// -------------------------------------------------------------------

class Settings : public ::google::protobuf::Message {
 public:
  Settings();
  virtual ~Settings();

  Settings(const Settings& from);

  inline Settings& operator=(const Settings& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Settings& default_instance();

  void Swap(Settings* other);

  // implements Message ----------------------------------------------

  Settings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Settings& from);
  void MergeFrom(const Settings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .citygen.protocol.StepSettings step_settings = 1;
  inline bool has_step_settings() const;
  inline void clear_step_settings();
  static const int kStepSettingsFieldNumber = 1;
  inline const ::citygen::protocol::StepSettings& step_settings() const;
  inline ::citygen::protocol::StepSettings* mutable_step_settings();
  inline ::citygen::protocol::StepSettings* release_step_settings();
  inline void set_allocated_step_settings(::citygen::protocol::StepSettings* step_settings);

  // @@protoc_insertion_point(class_scope:citygen.protocol.Settings)
 private:
  inline void set_has_step_settings();
  inline void clear_has_step_settings();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::citygen::protocol::StepSettings* step_settings_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_city_2eproto();
  friend void protobuf_AssignDesc_city_2eproto();
  friend void protobuf_ShutdownFile_city_2eproto();

  void InitAsDefaultInstance();
  static Settings* default_instance_;
};
// -------------------------------------------------------------------

class City : public ::google::protobuf::Message {
 public:
  City();
  virtual ~City();

  City(const City& from);

  inline City& operator=(const City& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const City& default_instance();

  void Swap(City* other);

  // implements Message ----------------------------------------------

  City* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const City& from);
  void MergeFrom(const City& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .citygen.protocol.Settings settings = 1;
  inline bool has_settings() const;
  inline void clear_settings();
  static const int kSettingsFieldNumber = 1;
  inline const ::citygen::protocol::Settings& settings() const;
  inline ::citygen::protocol::Settings* mutable_settings();
  inline ::citygen::protocol::Settings* release_settings();
  inline void set_allocated_settings(::citygen::protocol::Settings* settings);

  // repeated .citygen.protocol.Vector3 nodes = 2;
  inline int nodes_size() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 2;
  inline const ::citygen::protocol::Vector3& nodes(int index) const;
  inline ::citygen::protocol::Vector3* mutable_nodes(int index);
  inline ::citygen::protocol::Vector3* add_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::citygen::protocol::Vector3 >&
      nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::citygen::protocol::Vector3 >*
      mutable_nodes();

  // @@protoc_insertion_point(class_scope:citygen.protocol.City)
 private:
  inline void set_has_settings();
  inline void clear_has_settings();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::citygen::protocol::Settings* settings_;
  ::google::protobuf::RepeatedPtrField< ::citygen::protocol::Vector3 > nodes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_city_2eproto();
  friend void protobuf_AssignDesc_city_2eproto();
  friend void protobuf_ShutdownFile_city_2eproto();

  void InitAsDefaultInstance();
  static City* default_instance_;
};
// ===================================================================


// ===================================================================

// Vector3

// optional float x = 1;
inline bool Vector3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector3::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vector3::x() const {
  return x_;
}
inline void Vector3::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 2;
inline bool Vector3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector3::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vector3::y() const {
  return y_;
}
inline void Vector3::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional float z = 3;
inline bool Vector3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector3::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Vector3::z() const {
  return z_;
}
inline void Vector3::set_z(float value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// StepSettings

// optional int32 num_segments = 1 [default = 20];
inline bool StepSettings::has_num_segments() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StepSettings::set_has_num_segments() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StepSettings::clear_has_num_segments() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StepSettings::clear_num_segments() {
  num_segments_ = 20;
  clear_has_num_segments();
}
inline ::google::protobuf::int32 StepSettings::num_segments() const {
  return num_segments_;
}
inline void StepSettings::set_num_segments(::google::protobuf::int32 value) {
  set_has_num_segments();
  num_segments_ = value;
}

// optional float step_size = 2 [default = 0.5];
inline bool StepSettings::has_step_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StepSettings::set_has_step_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StepSettings::clear_has_step_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StepSettings::clear_step_size() {
  step_size_ = 0.5f;
  clear_has_step_size();
}
inline float StepSettings::step_size() const {
  return step_size_;
}
inline void StepSettings::set_step_size(float value) {
  set_has_step_size();
  step_size_ = value;
}

// optional float deviation = 3 [default = 0.7854];
inline bool StepSettings::has_deviation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StepSettings::set_has_deviation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StepSettings::clear_has_deviation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StepSettings::clear_deviation() {
  deviation_ = 0.7854f;
  clear_has_deviation();
}
inline float StepSettings::deviation() const {
  return deviation_;
}
inline void StepSettings::set_deviation(float value) {
  set_has_deviation();
  deviation_ = value;
}

// optional float road_height = 4 [default = 5];
inline bool StepSettings::has_road_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StepSettings::set_has_road_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StepSettings::clear_has_road_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StepSettings::clear_road_height() {
  road_height_ = 5;
  clear_has_road_height();
}
inline float StepSettings::road_height() const {
  return road_height_;
}
inline void StepSettings::set_road_height(float value) {
  set_has_road_height();
  road_height_ = value;
}

// -------------------------------------------------------------------

// Settings

// optional .citygen.protocol.StepSettings step_settings = 1;
inline bool Settings::has_step_settings() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Settings::set_has_step_settings() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Settings::clear_has_step_settings() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Settings::clear_step_settings() {
  if (step_settings_ != NULL) step_settings_->::citygen::protocol::StepSettings::Clear();
  clear_has_step_settings();
}
inline const ::citygen::protocol::StepSettings& Settings::step_settings() const {
  return step_settings_ != NULL ? *step_settings_ : *default_instance_->step_settings_;
}
inline ::citygen::protocol::StepSettings* Settings::mutable_step_settings() {
  set_has_step_settings();
  if (step_settings_ == NULL) step_settings_ = new ::citygen::protocol::StepSettings;
  return step_settings_;
}
inline ::citygen::protocol::StepSettings* Settings::release_step_settings() {
  clear_has_step_settings();
  ::citygen::protocol::StepSettings* temp = step_settings_;
  step_settings_ = NULL;
  return temp;
}
inline void Settings::set_allocated_step_settings(::citygen::protocol::StepSettings* step_settings) {
  delete step_settings_;
  step_settings_ = step_settings;
  if (step_settings) {
    set_has_step_settings();
  } else {
    clear_has_step_settings();
  }
}

// -------------------------------------------------------------------

// City

// optional .citygen.protocol.Settings settings = 1;
inline bool City::has_settings() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void City::set_has_settings() {
  _has_bits_[0] |= 0x00000001u;
}
inline void City::clear_has_settings() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void City::clear_settings() {
  if (settings_ != NULL) settings_->::citygen::protocol::Settings::Clear();
  clear_has_settings();
}
inline const ::citygen::protocol::Settings& City::settings() const {
  return settings_ != NULL ? *settings_ : *default_instance_->settings_;
}
inline ::citygen::protocol::Settings* City::mutable_settings() {
  set_has_settings();
  if (settings_ == NULL) settings_ = new ::citygen::protocol::Settings;
  return settings_;
}
inline ::citygen::protocol::Settings* City::release_settings() {
  clear_has_settings();
  ::citygen::protocol::Settings* temp = settings_;
  settings_ = NULL;
  return temp;
}
inline void City::set_allocated_settings(::citygen::protocol::Settings* settings) {
  delete settings_;
  settings_ = settings;
  if (settings) {
    set_has_settings();
  } else {
    clear_has_settings();
  }
}

// repeated .citygen.protocol.Vector3 nodes = 2;
inline int City::nodes_size() const {
  return nodes_.size();
}
inline void City::clear_nodes() {
  nodes_.Clear();
}
inline const ::citygen::protocol::Vector3& City::nodes(int index) const {
  return nodes_.Get(index);
}
inline ::citygen::protocol::Vector3* City::mutable_nodes(int index) {
  return nodes_.Mutable(index);
}
inline ::citygen::protocol::Vector3* City::add_nodes() {
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::citygen::protocol::Vector3 >&
City::nodes() const {
  return nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::citygen::protocol::Vector3 >*
City::mutable_nodes() {
  return &nodes_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace citygen

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_city_2eproto__INCLUDED
